{
    "RuleId":  "6481dada-8b0e-4b33-b218-d689d444b332\u0027)]",
    "DisplayName":  "Service Accounts Performing Remote PS",
    "Description":  "Service Accounts Performing Remote PowerShell.\nThe purpose behind this detection is for finding service accounts that are performing remote powershell sessions.\nThere are two phases to the detection: Identify service accounts, Find remote PS cmdlets being ran by these accounts.\nTo accomplish this, we utilize DeviceLogonEvents and DeviceEvents to find cmdlets ran that meet the criteria.\nOne of the main advantages of this method is that only requires server telemetry, and not the attacking client.\nThe first phase relies on the DeviceLogonEvents to determine whether an account is a service account or not, consider the following accounts with logons:.\nRandom_user has DeviceLogonEvents with type 2, 3, 7, 10, 11 \u0026 13.\nRandom_service_account \u0027should\u0027 only have DeviceLogonEvents with type 3,4 or 5.",
    "Severity":  "High",
    "Enabled":  true,
    "Query":  "let InteractiveTypes = pack_array(                                  // Declare Interactive logon type names\n    \u0027Interactive\u0027,\n    \u0027CachedInteractive\u0027,\n    \u0027Unlock\u0027,\n    \u0027RemoteInteractive\u0027,\n    \u0027CachedRemoteInteractive\u0027,\n    \u0027CachedUnlock\u0027\n);\nlet WhitelistedCmdlets = pack_array(                                // List of whitelisted commands that don\u0027t provide a lot of value\n    \u0027prompt\u0027,\n    \u0027Out-Default\u0027,\n    \u0027out-lineoutput\u0027,\n    \u0027format-default\u0027,\n    \u0027Set-StrictMode\u0027,\n    \u0027TabExpansion2\u0027\n);\nlet WhitelistedAccounts = pack_array(\u0027FakeWhitelistedAccount\u0027);     // List of accounts that are known to perform this activity in the environment and can be ignored\nDeviceLogonEvents                                                         // Get all logon events...\n| where AccountName !in~ (WhitelistedAccounts)                      // ...where it is not a whitelisted account...\n| where ActionType == \"LogonSuccess\"                                // ...and the logon was successful...\n| where AccountName !contains \"$\"                                   // ...and not a machine logon.\n| where AccountName !has \"winrm va_\"                                // WinRM will have pseudo account names that match this if there is an explicit permission for an admin to run the cmdlet, so assume it is good.\n| extend IsInteractive=(LogonType in (InteractiveTypes))            // Determine if the logon is interactive (True=1,False=0)...\n| summarize HasInteractiveLogon=max(IsInteractive)                  // ...then bucket and get the maximum interactive value (0 or 1)...\n            by AccountName                                          // ... by the AccountNames\n| where HasInteractiveLogon == 0                                    // ...and filter out all accounts that had an interactive logon.\n// At this point, we have a list of accounts that we believe to be service accounts\n// Now we need to find RemotePS sessions that were spawned by those accounts\n// Note that we look at all powershell cmdlets executed to form a 29-day baseline to evaluate the data on today\n| join kind=rightsemi (                                             // Start by dropping the account name and only tracking the...\n\tDeviceEvents                                                      // ...\n\t| where ActionType == \u0027PowerShellCommand\u0027                         // ...PowerShell commands seen...\n\t| where InitiatingProcessFileName =~ \u0027wsmprovhost.exe\u0027            // ...whose parent was wsmprovhost.exe (RemotePS Server)...\n    | extend AccountName = InitiatingProcessAccountName             // ...and add an AccountName field so the join is easier\n) on AccountName\n// At this point, we have all of the commands that were ran by service accounts\n| extend Command = tostring(extractjson(\u0027$.Command\u0027, tostring(AdditionalFields))) // Extract the actual PowerShell command that was executed\n| where Command !in (WhitelistedCmdlets)                                          // Remove any values that match the whitelisted cmdlets\n| summarize (Timestamp, ReportId)=arg_max(TimeGenerated, ReportId),               // Then group all of the cmdlets and calculate the min/max times of execution...\n    make_set(Command, 100000), count(), min(TimeGenerated) by                     // ...as well as creating a list of cmdlets ran and the count..\n    AccountName, AccountDomain, DeviceName, DeviceId                                             // ...and have the commonality be the account, DeviceName and DeviceId\n// At this point, we have machine-account pairs along with the list of commands run as well as the first/last time the commands were ran\n| order by AccountName asc                                        // Order the final list by AccountName just to make it easier to go through\n| extend HostName = iff(DeviceName has \u0027.\u0027, substring(DeviceName, 0, indexof(DeviceName, \u0027.\u0027)), DeviceName)\n| extend DnsDomain = iff(DeviceName has \u0027.\u0027, substring(DeviceName, indexof(DeviceName, \u0027.\u0027) + 1), \"\")                                           \n",
    "QueryFrequency":  "PT1H",
    "QueryPeriod":  "PT1H",
    "TriggerOperator":  "GreaterThan",
    "TriggerThreshold":  0,
    "SuppressionDuration":  "PT1H",
    "SuppressionEnabled":  false,
    "Tactics":  [
                    "LateralMovement"
                ],
    "Techniques":  [
                       "T1210"
                   ],
    "SubTechniques":  [

                      ],
    "AlertRuleTemplateName":  "d29cc957-0ddb-4d00-8d6f-ad1bb345ff9a",
    "TemplateVersion":  "1.0.0",
    "EntityMappings":  [
                           {
                               "entityType":  "Host",
                               "fieldMappings":  [
                                                     {
                                                         "identifier":  "FullName",
                                                         "columnName":  "DeviceName"
                                                     },
                                                     {
                                                         "identifier":  "HostName",
                                                         "columnName":  "HostName"
                                                     },
                                                     {
                                                         "identifier":  "DnsDomain",
                                                         "columnName":  "DnsDomain"
                                                     }
                                                 ]
                           },
                           {
                               "entityType":  "Account",
                               "fieldMappings":  [
                                                     {
                                                         "identifier":  "FullName",
                                                         "columnName":  "AccountName"
                                                     },
                                                     {
                                                         "identifier":  "DnsDomain",
                                                         "columnName":  "AccountDomain"
                                                     },
                                                     {
                                                         "identifier":  "Name",
                                                         "columnName":  "AccountName"
                                                     }
                                                 ]
                           }
                       ],
    "CustomDetails":  null,
    "IncidentConfiguration":  {
                                  "createIncident":  true,
                                  "groupingConfiguration":  {
                                                                "enabled":  false,
                                                                "reopenClosedIncident":  false,
                                                                "lookbackDuration":  "PT5H",
                                                                "matchingMethod":  "AllEntities",
                                                                "groupByEntities":  [

                                                                                    ],
                                                                "groupByAlertDetails":  [

                                                                                        ],
                                                                "groupByCustomDetails":  [

                                                                                         ]
                                                            }
                              },
    "EventGroupingSettings":  {
                                  "aggregationKind":  "SingleAlert"
                              },
    "Kind":  "Scheduled",
    "ApiVersion":  "2023-12-01-preview",
    "SourceFile":  "Azure_Sentinel_analytics_rules (12).json",
    "VersionHistory":  [
                           {
                               "Date":  "2025-05-22 16:19:22",
                               "Version":  "1.0",
                               "Action":  "Created",
                               "Changes":  [

                                           ],
                               "UpdatedBy":  "NoahBournes"
                           }
                       ],
    "LastUpdated":  "2025-05-22 16:19:22",
    "CurrentVersion":  "1.0",
    "OriginTenant":  "Crisk"
}
