{
    "RuleId":  "7e6239b0-f2ce-4bc0-b781-ea4b6c016b35\u0027)]",
    "DisplayName":  "TI map Domain entity to CommonSecurityLog",
    "Description":  "Identifies a match in CommonSecurityLog table from any Domain IOC from TI",
    "Severity":  "Medium",
    "Enabled":  true,
    "Query":  "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\n//Create a list of TLDs in our threat feed for later validation of extracted domains\nlet list_tlds = ThreatIntelligenceIndicator\n| where TimeGenerated \u003e ago(ioc_lookBack)\n| where isnotempty(DomainName)\n| extend DomainName = tolower(DomainName)\n| extend parts = split(DomainName, \u0027.\u0027)\n| extend tld = parts[(array_length(parts)-1)]\n| summarize count() by tostring(tld)\n| summarize make_list(tld);\nThreatIntelligenceIndicator\n| where TimeGenerated \u003e= ago(ioc_lookBack) and ExpirationDateTime \u003e now()\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n// Picking up only IOC\u0027s that contain the entities we want\n| where isnotempty(DomainName)\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n   CommonSecurityLog\n   | extend IngestionTime = ingestion_time()\n   | where IngestionTime \u003e ago(dt_lookBack)\n   | where DeviceEventClassID =~ \u0027url\u0027\n   //Uncomment the line below to only alert on allowed connections\n   //| where DeviceAction !~ \"block-url\"\n   //Extract domain from RequestURL, if not present extarct it from AdditionalExtentions\n   | extend PA_Url = columnifexists(\"RequestURL\", \"None\")\n   | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \"PanOS\", extract(\"([^\\\"]+)\", 1, tolower(AdditionalExtensions)), trim(\u0027\"\u0027, PA_Url))\n   | extend PA_Url = iif(PA_Url !startswith \"http://\" and ApplicationProtocol !~ \"ssl\", strcat(\u0027http://\u0027, PA_Url), iif(PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat(\u0027https://\u0027, PA_Url), PA_Url))\n   | extend Domain = trim(@\"\"\"\",tostring(parse_url(PA_Url).Host))\n   | where isnotempty(Domain)\n   | extend Domain = tolower(Domain)\n   | extend parts = split(Domain, \u0027.\u0027)\n   //Split out the TLD for the purpose of checking if we have any TI indicators with this TLD to match on\n   | extend tld = parts[(array_length(parts)-1)]\n   //Validate parsed domain by checking TLD against TLDs from threat feed and drop domains where there is no chance of a match\n   | where tld in~ (list_tlds)\n   | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n   ) on $left.DomainName==$right.Domain\n| where CommonSecurityLog_TimeGenerated \u003c ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, FileHashValue\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod\n| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url\n",
    "QueryFrequency":  "PT1H",
    "QueryPeriod":  "P14D",
    "TriggerOperator":  "GreaterThan",
    "TriggerThreshold":  0,
    "SuppressionDuration":  "PT5H",
    "SuppressionEnabled":  false,
    "Tactics":  [
                    "Impact"
                ],
    "Techniques":  [

                   ],
    "SubTechniques":  [

                      ],
    "AlertRuleTemplateName":  "dd0a6029-ecef-4507-89c4-fc355ac52111",
    "TemplateVersion":  null,
    "EntityMappings":  null,
    "CustomDetails":  null,
    "IncidentConfiguration":  {
                                  "createIncident":  true,
                                  "groupingConfiguration":  {
                                                                "enabled":  false,
                                                                "reopenClosedIncident":  false,
                                                                "lookbackDuration":  "PT5M",
                                                                "matchingMethod":  "AllEntities",
                                                                "groupByEntities":  [

                                                                                    ],
                                                                "groupByAlertDetails":  null,
                                                                "groupByCustomDetails":  null
                                                            }
                              },
    "EventGroupingSettings":  {
                                  "aggregationKind":  "SingleAlert"
                              },
    "Kind":  "Scheduled",
    "ApiVersion":  "2023-12-01-preview",
    "SourceFile":  "Azure_Sentinel_analytics_rules (14).json",
    "VersionHistory":  [
                           {
                               "Date":  "2025-05-22 16:19:24",
                               "Version":  "1.0",
                               "Action":  "Created",
                               "Changes":  [

                                           ],
                               "UpdatedBy":  "NoahBournes"
                           }
                       ],
    "LastUpdated":  "2025-05-22 16:19:24",
    "CurrentVersion":  "1.0",
    "OriginTenant":  "Crisk"
}
