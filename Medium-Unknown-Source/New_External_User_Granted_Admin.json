{
    "RuleId":  "15fddc35-7ab5-4f51-8f3e-72a5ed83a3ce\u0027)]",
    "DisplayName":  "New External User Granted Admin",
    "Description":  "This query will detect instances where a newly invited external user is granted an administrative role. By default this query\nwill alert on any granted administrative role, however this can be modified using the roles variable if false positives occur\nin your environment. The maximum delta between invite and escalation to admin is 60 minues, this can be configured using the \ndeltaBetweenInviteEscalation variable.",
    "Severity":  "Medium",
    "Enabled":  true,
    "Query":  "// Administrative roles to look for, default is all admin roles\nlet roles = dynamic([\"Administrator\", \"Admin\"]);\n// The maximum distances between and invite and acceptance\nlet maxTimeBetweenInviteAccept = 30min;\n// The delta (minutes) between the invite being sent and the account being escalated\nlet deltaBetweenInviteEscalation = 60;\n// Collect external user invitations\nlet invite = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Invite external user\"\n| extend Target = tostring(TargetResources[0].[\"userPrincipalName\"])\n| extend InviteInitiator = tostring(InitiatedBy.[\"user\"].[\"userPrincipalName\"])\n| where isnotempty(InviteInitiator);\n// Collect redeem events\nlet redeem = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Redeem external user invite\"\n| where Result =~ \"success\"\n| extend Target = tostring(TargetResources[0].[\"displayName\"]) | extend Target = tostring(extract(@\"UPN\\:\\s(.+)\\,\\sEmail\",1,Target))\n| where isnotempty(Target);\n// Union the inivtation and redeem data then run the sequence_detect kusto plugin\ninvite\n| union redeem\n| order by TimeGenerated\n| project TimeGenerated, Target, InviteInitiator, OperationName, TenantId\n| evaluate sequence_detect(TimeGenerated, maxTimeBetweenInviteAccept, maxTimeBetweenInviteAccept, invite=(OperationName has \"Invite external user\"), redeem=(OperationName has \"Redeem external user invite\"), Target)\n| join (\nAuditLogs\n| where Category =~ \"RoleManagement\"\n| where AADOperationType in (\"Assign\", \"AssignEligibleRole\")\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-expand TargetResources\n// Limit to external accounts\n| where TargetResources.userPrincipalName has \"EXT\"\n| mv-expand TargetResources.modifiedProperties\n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)\n| where displayName_ =~ \"Role.DisplayName\"\n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))\n// Perform check for admin roles\n| where RoleName has_any(roles)\n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| where Initiator != \"MS-PIM\"\n| extend Target = tostring(TargetResources.userPrincipalName)\n| summarize by TimeGenerated, OperationName,  RoleName, Target, Initiator, Result\n) on Target\n// Calculate delta between the invite and the account escalation\n| extend delta = datetime_diff(\"minute\", TimeGenerated, invite_TimeGenerated)\n| where delta \u003c= deltaBetweenInviteEscalation\n| project InvitationTime=invite_TimeGenerated, RedeemTime=redeem_TimeGenerated, GrantTime=TimeGenerated, ExternalUser=Target, RoleGranted=RoleName, AdminInitiator=Initiator, MinsBetweenInviteAndEscalation=delta\n",
    "QueryFrequency":  "P1D",
    "QueryPeriod":  "P1D",
    "TriggerOperator":  "GreaterThan",
    "TriggerThreshold":  0,
    "SuppressionDuration":  "PT5H",
    "SuppressionEnabled":  false,
    "Tactics":  [
                    "Persistence"
                ],
    "Techniques":  [

                   ],
    "SubTechniques":  [

                      ],
    "AlertRuleTemplateName":  "d7424fd9-abb3-4ded-a723-eebe023aaa0b",
    "TemplateVersion":  null,
    "EntityMappings":  null,
    "CustomDetails":  null,
    "IncidentConfiguration":  {
                                  "createIncident":  true,
                                  "groupingConfiguration":  {
                                                                "enabled":  false,
                                                                "reopenClosedIncident":  false,
                                                                "lookbackDuration":  "PT5M",
                                                                "matchingMethod":  "AllEntities",
                                                                "groupByEntities":  [

                                                                                    ],
                                                                "groupByAlertDetails":  null,
                                                                "groupByCustomDetails":  null
                                                            }
                              },
    "EventGroupingSettings":  {
                                  "aggregationKind":  "SingleAlert"
                              },
    "Kind":  "Scheduled",
    "ApiVersion":  "2023-12-01-preview",
    "SourceFile":  "Azure_Sentinel_analytics_rules (14).json",
    "VersionHistory":  [
                           {
                               "Date":  "2025-05-22 16:19:24",
                               "Version":  "1.0",
                               "Action":  "Created",
                               "Changes":  [

                                           ],
                               "UpdatedBy":  "NoahBournes"
                           }
                       ],
    "LastUpdated":  "2025-05-22 16:19:24",
    "CurrentVersion":  "1.0",
    "OriginTenant":  "Crisk"
}
